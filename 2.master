$ kubeadm config images list

k8s.gcr.io/kube-apiserver:v1.12.1
k8s.gcr.io/kube-controller-manager:v1.12.1
k8s.gcr.io/kube-scheduler:v1.12.1
k8s.gcr.io/kube-proxy:v1.12.1
k8s.gcr.io/pause:3.1
k8s.gcr.io/etcd:3.2.24
k8s.gcr.io/coredns:1.2.2

镜像
如果你的节点上面有科学上网的工具，可以忽略这一步，我们需要提前将所需的gcr.io上面的镜像下载到节点上面，当然前提条件是你已经成功安装了`docker。master节点，执行下面的命令：

 
cat <<EOF > master_docker.sh
#!/bin/bash
docker pull coll/kube-apiserver:v1.12.1
docker pull coll/kube-controller-manager:v1.12.1
docker pull coll/kube-scheduler:v1.12.1
docker pull coll/kube-proxy:v1.12.1
docker pull coll/pause:3.1
docker pull coll/etcd:3.2.24
docker pull coll/coredns:1.2.2
docker pull coll/flannel:v0.10.0-amd64
 
docker tag coll/kube-apiserver:v1.12.1   k8s.gcr.io/kube-apiserver:v1.12.1
docker tag coll/kube-controller-manager:v1.12.1 k8s.gcr.io/kube-controller-manager:v1.12.1
docker tag coll/kube-scheduler:v1.12.1 k8s.gcr.io/kube-scheduler:v1.12.1
docker tag coll/kube-proxy:v1.12.1 k8s.gcr.io/kube-proxy:v1.12.1
docker tag coll/pause:3.1 k8s.gcr.io/pause:3.1
docker tag coll/etcd:3.2.24 k8s.gcr.io/etcd:3.2.24
docker tag coll/coredns:1.2.2 k8s.gcr.io/coredns:1.2.2
docker tag coll/flannel:v0.10.0-amd64 quay.io/coreos/flannel:v0.10.0-amd64
EOF

$ chmod +x master_docker.sh && bash -x master_docker.sh

安装 kubeadm、kubelet、kubectl
在确保 docker 安装完成后，上面的相关环境配置也完成了，对应所需要的镜像(如果可以科学上网可以跳过这一步)也下载完成了，现在我们就可以来安装 kubeadm 了，我们这里是通过指定yum 源的方式来进行安装的：

cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
        https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF
当然了，上面的yum源也是需要科学上网的，如果不能科学上网的话，我们可以使用阿里云的源进行安装：

cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=0
repo_gpgcheck=0
gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg
        http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg
EOF

直接安装最新版(指定版本kubelet-1.12.1-0 kubeadm-1.12.1-0 kubectl-1.12.1-0)

$ yum makecache fast && yum install -y kubelet kubeadm kubectl

$ systemctl enable kubelet.service

集群安装初始化
到这里我们的准备工作就完成了，接下来我们就可以在master节点上用kubeadm命令来初始化我们的集群了：
(启动有报错解决报错)
$ kubeadm init \
  --kubernetes-version=v1.12.1 \
  --pod-network-cidr=10.244.0.0/16 \
  --apiserver-advertise-address=192.168.160.129

....
To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

You can now join any number of machines by running the following on each node
as root:

  kubeadm join 192.168.160.129:6443 --token 4hgh1s.2o3k2e7hd7xt1mku --discovery-token-ca-cert-hash sha256:17ee6588bb37a95ddb7978c04e59670779a5fd6f61896bb24fa75d848f9c2f3a


$ mkdir -p $HOME/.kube
$ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
$ sudo chown $(id -u):$(id -g) $HOME/.kube/config

我们根据上面的提示配置好 kubectl 后，就可以使用 kubectl 来查看集群的信息了
$ kubectl get cs
NAME                 STATUS    MESSAGE              ERROR
scheduler            Healthy   ok                   
controller-manager   Healthy   ok                   
etcd-0               Healthy   {"health": "true"}   


要注意将上面的加入集群的命令保存下面，如果忘记保存上面的 token 和 sha256 值的话也不用担心，我们可以使用下面的命令来查找：
$ kubeadm token list

TOKEN                     TTL       EXPIRES                     USAGES                   DESCRIPTION                                                EXTRA GROUPS
am2lok.4oqf2ocx3xefoi4g   23h       2018-10-20T14:03:17+08:00   authentication,signing   The default bootstrap token generated by 'kubeadm init'.   system:bootstrappers:kubeadm:default-node-token

要查看 CA 证书的 sha256 的值的话，我们可以使用openssl来读取证书获取 sha256 的值：
$ openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'
6c6d6861f8eddb1f3efee8c09f63599a284bf093640fd8fa1946f3e3151b42f6


安装 Pod Network
接下来我们来安装flannel网络插件，很简单，和安装普通的 POD 没什么两样：

$ wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
$ kubectl apply -f  kube-flannel.yml
clusterrole.rbac.authorization.k8s.io/flannel created
clusterrolebinding.rbac.authorization.k8s.io/flannel created
serviceaccount/flannel created
configmap/kube-flannel-cfg created
daemonset.extensions/kube-flannel-ds-amd64 created
daemonset.extensions/kube-flannel-ds-arm64 created
daemonset.extensions/kube-flannel-ds-arm created
daemonset.extensions/kube-flannel-ds-ppc64le created
daemonset.extensions/kube-flannel-ds-s390x created

另外需要注意的是如果你的节点有多个网卡的话，需要在 kube-flannel.yml 中使用--iface参数指定集群主机内网网卡的名称，否则可能会出现 dns 无法解析。flanneld 启动参数加上--iface=<iface-name>
args:
- --ip-masq
- --kube-subnet-mgr
- --iface=eth0

安装完成后使用 kubectl get pods 命令可以查看到我们集群中的组件运行状态，如果都是Running 状态的话，那么恭喜你，你的 master 节点安装成功了。

$ kubectl get pods --all-namespaces
NAMESPACE     NAME                              READY   STATUS    RESTARTS   AGE
kube-system   coredns-576cbf47c7-fdmq4          1/1     Running   0          5m48s
kube-system   coredns-576cbf47c7-glg4r          1/1     Running   0          5m48s
kube-system   etcd-kube-m1                      1/1     Running   0          4m56s
kube-system   kube-apiserver-kube-m1            1/1     Running   0          4m57s
kube-system   kube-controller-manager-kube-m1   1/1     Running   0          5m1s
kube-system   kube-flannel-ds-amd64-n82tx       1/1     Running   0          2m21s
kube-system   kube-proxy-f8npq                  1/1     Running   0          5m48s
kube-system   kube-scheduler-kube-m1            1/1     Running   0          5m

去掉这个污点使node1参与工作负载：
kubectl taint nodes node1 node-role.kubernetes.io/master-
node "node1" untainted


测试DNS
kubectl run curl --image=radial/busyboxplus:curl -it
kubectl run --generator=deployment/apps.v1beta1 is DEPRECATED and will be removed in a future version. Use kubectl create instead.
If you don't see a command prompt, try pressing enter.
[ root@curl-5cc7b478b6-r997p:/ ]$  nslookup kubernetes.default